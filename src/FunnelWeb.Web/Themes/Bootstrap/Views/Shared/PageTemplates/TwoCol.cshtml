@using FunnelWeb.Utilities;
@model FunnelWeb.Web.Views.Wiki.PageModel
@{
    Layout = "~/Themes/Bootstrap/Views/Shared/_Public.cshtml";
}
@section Meta {
    <meta name="description" content="@Model.Entry.MetaDescription" />
    <meta name="keywords" content="@Model.Entry.TagsCommaSeparated" />
    <link rel="canonical" href="@Html.Qualify(Html.ActionUrl("Page", new { page = Model.Entry.Name }))" />
    <link rel="pingback" href="@Html.Qualify("/pingback")" />
    @if (Model.Entry.IsPriorVersion)
    {
        <meta name="robots" content="noindex, nofollow" />
    }
}
<div class="span12" role="main">
    @if(!Html.Settings().EnableDisqusCommenting)
    {
        @Html.ValidationSummary("Comment unsuccessful. Please correct the errors below.", new {@class = "alert-message block-message error"})
    }
    @if (Model.Entry.Status == FunnelWeb.Model.EntryStatus.Private)
    {
        <div class="alert-message block-message">
            <p>This is a <strong>private</strong> page. Only logged in users will be able to see it.</p>
            <div class="alert-actions">
                @Html.ActionLink("Edit this page ", "Edit", "WikiAdmin", new { Area = "Admin", page = Model.Page }, new { @class = "btn small" }) to make it public.
            </div>
        </div>    
    }
    <article>
        @if (!Model.Entry.HideChrome)
        {
            <header>
                <h1>@Html.ActionLink(Model.Entry.Title, "Page", "Wiki", new { page = Model.Entry.Name }, null)</h1>
            </header>
        }
        @if (!Model.Entry.HideChrome && Model.Entry.IsPriorVersion)
        {
            <div class="alert-message block-message">
                <div>
                    <span>
                        You are looking at revision @Model.Entry.RevisionNumber of this page, which may be out of date. @Html.ActionLink("View the latest version.", "Page", "Wiki", new { page = Model.Entry.Name }, null)
                    </span>
                    <span>&nbsp;</span>
                </div>
            </div>
        }
        @RenderBody()
        @if (!Model.Entry.HideChrome)
        {
            <footer>
                @if (Html.Settings().FacebookLike)
                {
                    <div class="facebook">
                        <iframe src="http://www.facebook.com/plugins/like.php?href=@Url.Encode(Request.GetOriginalUrl().AbsoluteUri)&amp;layout=standard&amp;show_faces=true&amp;width=450&amp;action=like&amp;colorscheme=light&amp;height=80" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:80px;" allowTransparency="true">
                        </iframe>
                    </div>
                }
  
                @Html.DisplayFor(x => x.Entry.TagsCommaSeparated)
                <div>
                    Posted by @Model.Entry.Author@{if (@Model.Entry.RevisionAuthor != Model.Entry.Author) { Write(string.Format(", Last edit by: {0}", @Model.Entry.RevisionAuthor)); }}
                    on <time datetime="@Model.Entry.Published.ToUniversalTime().ToString("yyyy-M-ddTHH:mm:ssZ")" pubdate="pubdate">@Model.Entry.Published.ToUniversalTime().ToString("MMM d yyyy")</time>
                </div>
                <span>Last revised: <a href="@Html.ActionUrl("Page", new { page = Model.Page.ToString(), revision = Model.Entry.RevisionNumber })">@Html.Date(Model.Entry.Revised)</a></span>
                @if (Html.Settings().EnablePublicHistory)
                {
                    <span>@Html.ActionLink("History", "Revisions", "Wiki", new { page = Model.Page }, null)</span>
                }
                @if (ViewData.IsLoggedIn())
                { 
                    <span>@Html.ActionLink("Edit", "Edit", "WikiAdmin", new { Area = "Admin", page = Model.Page }, new { })</span>
                }
                @if (Model.Entry.IsPriorVersion)
                {
                    <div>
                        <span>You are looking at revision @Model.Entry.RevisionNumber of this page, which may
                            be out of date. @Html.ActionLink("View the latest version.", "Page", "Wiki", new { page = Model.Entry.Name }, null)</span>
                    </div>
                }
                @if (Model.Entry.Pingbacks.Count > 0)
                {
                    <div class="well">
                        <h2>Trackbacks</h2>
                        <ul>
                            @foreach (var pingback in Model.Entry.Pingbacks)
                            {
                                <li>@Html.Encode(pingback.TargetTitle) | <a href="@Html.AttributeEncode(pingback.TargetUri)">@Html.Encode(pingback.TargetUri)</a></li>
                            }
                        </ul>
                        @if (Model.Entry.PingbackCount > Model.Entry.Pingbacks.Count)
                        {
                            @Html.ActionLink(string.Format("View all {0} Trackbacks", Model.Entry.PingbackCount), "Pingbacks", "Wiki", new { page = Model.Entry.Name }, null)
                        }
                    </div>
                }
            </footer>
        }
        else
        {
            if (ViewData.IsLoggedIn())
            {
                <footer>
                    <span>@Html.ActionLink("Edit", "Edit", "WikiAdmin", new { Area = "Admin", page = Model.Page }, new { })</span>
                </footer>
            }
        }
        @if (Model.Entry.IsDiscussionEnabled)
        {
            @Html.DisplayFor(x => x.Entry.Comments, new { Model.Entry })
        }
    </article>
    @if (Model.Entry.IsDiscussionEnabled)
    {
        if (Html.Settings().DisableCommentsOlderThan > 0 && DateTime.UtcNow.AddDays(-Html.Settings().DisableCommentsOlderThan) > Model.Entry.Published)
        {
            <p>No new comments are allowed on this post.</p>
        }
        else
        {
            Html.RenderPartial("_EditComments", Model);
        }
    }

</div>
<aside class="span4" role="complementary">
    @Html.RenderTrusted(Model.Entry.Summary, Formats.Markdown)
</aside>